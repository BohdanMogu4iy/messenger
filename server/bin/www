#!/usr/bin/env node

/**
 * Module dependencies.
 */
const mongoose = require('mongoose')
const socketIO = require('socket.io')
const app = require('../app')
const debug = require('debug')('mogu4iyMessenger:server')
const http = require('http')

const config = process.env.NODE_ENV === 'production' ? require('../config').prod : require('../config').dev

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '5000')
app.set('port', port)

/**
 * Create HTTP server.
 */

const server = http.createServer(app)

/**
 * Init Socket.IO
 */
const initSocketIO = require("../socket")

const io = socketIO(server, {
    cors: {
        origin: '*'
    }
})

initSocketIO(io)

/**
 * Listen on provided port, on all network interfaces.
 */

async function start() {
    await mongoose.connect(config.mongo_db.URI, {
        useUnifiedTopology: true,
        useNewUrlParser: true,
        useCreateIndex: true,
        useFindAndModify: false
    })
        .then(() => {
            server.listen(port)
            server.on('error', onError)
            server.on('listening', onListening)
        })
        .catch(error => {
                console.log(`MongoDbClient error: ${error}`)
            }
        )
}

start()

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10)

    if (isNaN(port)) {
        // named pipe
        return val
    }

    if (port >= 0) {
        // port number
        return port
    }

    return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges')
            process.exit(1)
            break
        case 'EADDRINUSE':
            console.error(bind + ' is already in use')
            process.exit(1)
            break
        default:
            throw error
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address()
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port
    debug('Listening on ' + bind)
    console.log(`Server is listening on ${bind}`)
}
